/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CreditConditionResponse } from '../models/credit-condition-response';
import { getAllConditionNames } from '../fn/credit-condition/get-all-condition-names';
import { GetAllConditionNames$Params } from '../fn/credit-condition/get-all-condition-names';
import { getBestConditionForUser } from '../fn/credit-condition/get-best-condition-for-user';
import { GetBestConditionForUser$Params } from '../fn/credit-condition/get-best-condition-for-user';
import { getConditionByName } from '../fn/credit-condition/get-condition-by-name';
import { GetConditionByName$Params } from '../fn/credit-condition/get-condition-by-name';
import { recalculationOfMonthlyPayment } from '../fn/credit-condition/recalculation-of-monthly-payment';
import { RecalculationOfMonthlyPayment$Params } from '../fn/credit-condition/recalculation-of-monthly-payment';
import { sendBestConditionForClient } from '../fn/credit-condition/send-best-condition-for-client';
import { SendBestConditionForClient$Params } from '../fn/credit-condition/send-best-condition-for-client';

@Injectable({ providedIn: 'root' })
export class CreditConditionService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `sendBestConditionForClient()` */
  static readonly SendBestConditionForClientPath = '/credit-condition/send/final-condition/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendBestConditionForClient()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendBestConditionForClient$Response(params: SendBestConditionForClient$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return sendBestConditionForClient(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendBestConditionForClient$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendBestConditionForClient(params: SendBestConditionForClient$Params, context?: HttpContext): Observable<number> {
    return this.sendBestConditionForClient$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `recalculationOfMonthlyPayment()` */
  static readonly RecalculationOfMonthlyPaymentPath = '/credit-condition/recalculation-monthly-payment';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `recalculationOfMonthlyPayment()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  recalculationOfMonthlyPayment$Response(params: RecalculationOfMonthlyPayment$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return recalculationOfMonthlyPayment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `recalculationOfMonthlyPayment$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  recalculationOfMonthlyPayment(params: RecalculationOfMonthlyPayment$Params, context?: HttpContext): Observable<number> {
    return this.recalculationOfMonthlyPayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getConditionByName()` */
  static readonly GetConditionByNamePath = '/credit-condition/condition/by/condition-name';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getConditionByName()` instead.
   *
   * This method doesn't expect any request body.
   */
  getConditionByName$Response(params: GetConditionByName$Params, context?: HttpContext): Observable<StrictHttpResponse<CreditConditionResponse>> {
    return getConditionByName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getConditionByName$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getConditionByName(params: GetConditionByName$Params, context?: HttpContext): Observable<CreditConditionResponse> {
    return this.getConditionByName$Response(params, context).pipe(
      map((r: StrictHttpResponse<CreditConditionResponse>): CreditConditionResponse => r.body)
    );
  }

  /** Path part for operation `getBestConditionForUser()` */
  static readonly GetBestConditionForUserPath = '/credit-condition/best-condition/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBestConditionForUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBestConditionForUser$Response(params: GetBestConditionForUser$Params, context?: HttpContext): Observable<StrictHttpResponse<CreditConditionResponse>> {
    return getBestConditionForUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBestConditionForUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBestConditionForUser(params: GetBestConditionForUser$Params, context?: HttpContext): Observable<CreditConditionResponse> {
    return this.getBestConditionForUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<CreditConditionResponse>): CreditConditionResponse => r.body)
    );
  }

  /** Path part for operation `getAllConditionNames()` */
  static readonly GetAllConditionNamesPath = '/credit-condition/all-conditions/names';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllConditionNames()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllConditionNames$Response(params?: GetAllConditionNames$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getAllConditionNames(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllConditionNames$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllConditionNames(params?: GetAllConditionNames$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getAllConditionNames$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

}
