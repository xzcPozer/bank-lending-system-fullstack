/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addCreditRequest } from '../fn/credit-request/add-credit-request';
import { AddCreditRequest$Params } from '../fn/credit-request/add-credit-request';
import { addCreditRequest1 } from '../fn/credit-request/add-credit-request-1';
import { AddCreditRequest1$Params } from '../fn/credit-request/add-credit-request-1';
import { changeCreditRequest } from '../fn/credit-request/change-credit-request';
import { ChangeCreditRequest$Params } from '../fn/credit-request/change-credit-request';
import { changeCreditRequest1 } from '../fn/credit-request/change-credit-request-1';
import { ChangeCreditRequest1$Params } from '../fn/credit-request/change-credit-request-1';
import { CreditRequestResponse } from '../models/credit-request-response';
import { getAll } from '../fn/credit-request/get-all';
import { GetAll$Params } from '../fn/credit-request/get-all';
import { getAll1 } from '../fn/credit-request/get-all-1';
import { GetAll1$Params } from '../fn/credit-request/get-all-1';
import { getAllF } from '../fn/credit-request/get-all-f';
import { GetAllF$Params } from '../fn/credit-request/get-all-f';
import { getAllWithLendingOfficer } from '../fn/credit-request/get-all-with-lending-officer';
import { GetAllWithLendingOfficer$Params } from '../fn/credit-request/get-all-with-lending-officer';
import { getCreditRequestById } from '../fn/credit-request/get-credit-request-by-id';
import { GetCreditRequestById$Params } from '../fn/credit-request/get-credit-request-by-id';
import { PageResponseCreditRequestClientResponse } from '../models/page-response-credit-request-client-response';
import { PageResponseCreditRequestResponse } from '../models/page-response-credit-request-response';
import { PageResponseCreditRequestResponseForDirector } from '../models/page-response-credit-request-response-for-director';

@Injectable({ providedIn: 'root' })
export class CreditRequestService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `changeCreditRequest()` */
  static readonly ChangeCreditRequestPath = '/credit-request/change/by/solvency/{creditRequestId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeCreditRequest()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeCreditRequest$Response(params: ChangeCreditRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return changeCreditRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeCreditRequest$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeCreditRequest(params: ChangeCreditRequest$Params, context?: HttpContext): Observable<number> {
    return this.changeCreditRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `changeCreditRequest1()` */
  static readonly ChangeCreditRequest1Path = '/credit-request/change/by/solvency/and/employment/{creditRequestId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeCreditRequest1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeCreditRequest1$Response(params: ChangeCreditRequest1$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return changeCreditRequest1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeCreditRequest1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeCreditRequest1(params: ChangeCreditRequest1$Params, context?: HttpContext): Observable<number> {
    return this.changeCreditRequest1$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `addCreditRequest()` */
  static readonly AddCreditRequestPath = '/credit-request/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addCreditRequest()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCreditRequest$Response(params?: AddCreditRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addCreditRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addCreditRequest$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCreditRequest(params?: AddCreditRequest$Params, context?: HttpContext): Observable<number> {
    return this.addCreditRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `addCreditRequest1()` */
  static readonly AddCreditRequest1Path = '/credit-request/add/by/hired-worker';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addCreditRequest1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCreditRequest1$Response(params?: AddCreditRequest1$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addCreditRequest1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addCreditRequest1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCreditRequest1(params?: AddCreditRequest1$Params, context?: HttpContext): Observable<number> {
    return this.addCreditRequest1$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getCreditRequestById()` */
  static readonly GetCreditRequestByIdPath = '/credit-request/request/by/{creditRequestId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCreditRequestById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCreditRequestById$Response(params: GetCreditRequestById$Params, context?: HttpContext): Observable<StrictHttpResponse<CreditRequestResponse>> {
    return getCreditRequestById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCreditRequestById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCreditRequestById(params: GetCreditRequestById$Params, context?: HttpContext): Observable<CreditRequestResponse> {
    return this.getCreditRequestById$Response(params, context).pipe(
      map((r: StrictHttpResponse<CreditRequestResponse>): CreditRequestResponse => r.body)
    );
  }

  /** Path part for operation `getAll()` */
  static readonly GetAllPath = '/credit-request/my-requests';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll$Response(params?: GetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCreditRequestClientResponse>> {
    return getAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll(params?: GetAll$Params, context?: HttpContext): Observable<PageResponseCreditRequestClientResponse> {
    return this.getAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCreditRequestClientResponse>): PageResponseCreditRequestClientResponse => r.body)
    );
  }

  /** Path part for operation `getAllF()` */
  static readonly GetAllFPath = '/credit-request/all-requests';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllF()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllF$Response(params?: GetAllF$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCreditRequestResponse>> {
    return getAllF(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllF$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllF(params?: GetAllF$Params, context?: HttpContext): Observable<PageResponseCreditRequestResponse> {
    return this.getAllF$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCreditRequestResponse>): PageResponseCreditRequestResponse => r.body)
    );
  }

  /** Path part for operation `getAllWithLendingOfficer()` */
  static readonly GetAllWithLendingOfficerPath = '/credit-request/all-requests/with/lending-officer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllWithLendingOfficer()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllWithLendingOfficer$Response(params?: GetAllWithLendingOfficer$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCreditRequestResponseForDirector>> {
    return getAllWithLendingOfficer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllWithLendingOfficer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllWithLendingOfficer(params?: GetAllWithLendingOfficer$Params, context?: HttpContext): Observable<PageResponseCreditRequestResponseForDirector> {
    return this.getAllWithLendingOfficer$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCreditRequestResponseForDirector>): PageResponseCreditRequestResponseForDirector => r.body)
    );
  }

  /** Path part for operation `getAll1()` */
  static readonly GetAll1Path = '/credit-request/all-requests/by/processed';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll1$Response(params: GetAll1$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCreditRequestResponse>> {
    return getAll1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll1(params: GetAll1$Params, context?: HttpContext): Observable<PageResponseCreditRequestResponse> {
    return this.getAll1$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCreditRequestResponse>): PageResponseCreditRequestResponse => r.body)
    );
  }

}
