/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ClientInformationResponse } from '../models/client-information-response';
import { getAllClientInfo } from '../fn/client-information/get-all-client-info';
import { GetAllClientInfo$Params } from '../fn/client-information/get-all-client-info';
import { getAllClientInfoBySort } from '../fn/client-information/get-all-client-info-by-sort';
import { GetAllClientInfoBySort$Params } from '../fn/client-information/get-all-client-info-by-sort';
import { getClientInfoBySerialNumber } from '../fn/client-information/get-client-info-by-serial-number';
import { GetClientInfoBySerialNumber$Params } from '../fn/client-information/get-client-info-by-serial-number';
import { PageResponseClientInformationResponse } from '../models/page-response-client-information-response';

@Injectable({ providedIn: 'root' })
export class ClientInformationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getClientInfoBySerialNumber()` */
  static readonly GetClientInfoBySerialNumberPath = '/client-information/client/by/serial-number';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getClientInfoBySerialNumber()` instead.
   *
   * This method doesn't expect any request body.
   */
  getClientInfoBySerialNumber$Response(params: GetClientInfoBySerialNumber$Params, context?: HttpContext): Observable<StrictHttpResponse<ClientInformationResponse>> {
    return getClientInfoBySerialNumber(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getClientInfoBySerialNumber$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getClientInfoBySerialNumber(params: GetClientInfoBySerialNumber$Params, context?: HttpContext): Observable<ClientInformationResponse> {
    return this.getClientInfoBySerialNumber$Response(params, context).pipe(
      map((r: StrictHttpResponse<ClientInformationResponse>): ClientInformationResponse => r.body)
    );
  }

  /** Path part for operation `getAllClientInfo()` */
  static readonly GetAllClientInfoPath = '/client-information/all-client';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllClientInfo()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllClientInfo$Response(params?: GetAllClientInfo$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseClientInformationResponse>> {
    return getAllClientInfo(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllClientInfo$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllClientInfo(params?: GetAllClientInfo$Params, context?: HttpContext): Observable<PageResponseClientInformationResponse> {
    return this.getAllClientInfo$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseClientInformationResponse>): PageResponseClientInformationResponse => r.body)
    );
  }

  /** Path part for operation `getAllClientInfoBySort()` */
  static readonly GetAllClientInfoBySortPath = '/client-information/all-client/by/sort';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllClientInfoBySort()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllClientInfoBySort$Response(params: GetAllClientInfoBySort$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseClientInformationResponse>> {
    return getAllClientInfoBySort(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllClientInfoBySort$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllClientInfoBySort(params: GetAllClientInfoBySort$Params, context?: HttpContext): Observable<PageResponseClientInformationResponse> {
    return this.getAllClientInfoBySort$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseClientInformationResponse>): PageResponseClientInformationResponse => r.body)
    );
  }

}
