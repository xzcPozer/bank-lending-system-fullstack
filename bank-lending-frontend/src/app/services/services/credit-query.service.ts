/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { changeSolvencyHiredWorkerFinancialSituation } from '../fn/credit-query/change-solvency-hired-worker-financial-situation';
import { ChangeSolvencyHiredWorkerFinancialSituation$Params } from '../fn/credit-query/change-solvency-hired-worker-financial-situation';
import { changeSolvencyHiredWorkerTaxAgent } from '../fn/credit-query/change-solvency-hired-worker-tax-agent';
import { ChangeSolvencyHiredWorkerTaxAgent$Params } from '../fn/credit-query/change-solvency-hired-worker-tax-agent';
import { changeSolvencyIpFinancialSituation } from '../fn/credit-query/change-solvency-ip-financial-situation';
import { ChangeSolvencyIpFinancialSituation$Params } from '../fn/credit-query/change-solvency-ip-financial-situation';
import { changeSolvencyIpTaxAgent } from '../fn/credit-query/change-solvency-ip-tax-agent';
import { ChangeSolvencyIpTaxAgent$Params } from '../fn/credit-query/change-solvency-ip-tax-agent';
import { confirmationOfEmploymentPdf } from '../fn/credit-query/confirmation-of-employment-pdf';
import { ConfirmationOfEmploymentPdf$Params } from '../fn/credit-query/confirmation-of-employment-pdf';
import { confirmationOfSolvencyPdf } from '../fn/credit-query/confirmation-of-solvency-pdf';
import { ConfirmationOfSolvencyPdf$Params } from '../fn/credit-query/confirmation-of-solvency-pdf';
import { createCreditQueryPdf } from '../fn/credit-query/create-credit-query-pdf';
import { CreateCreditQueryPdf$Params } from '../fn/credit-query/create-credit-query-pdf';
import { creditQueryVerifyPdf } from '../fn/credit-query/credit-query-verify-pdf';
import { CreditQueryVerifyPdf$Params } from '../fn/credit-query/credit-query-verify-pdf';
import { employmentVerifyPdf } from '../fn/credit-query/employment-verify-pdf';
import { EmploymentVerifyPdf$Params } from '../fn/credit-query/employment-verify-pdf';
import { getAllClientPaymentInformationByLastname } from '../fn/credit-query/get-all-client-payment-information-by-lastname';
import { GetAllClientPaymentInformationByLastname$Params } from '../fn/credit-query/get-all-client-payment-information-by-lastname';
import { getCreditRequestInformation } from '../fn/credit-query/get-credit-request-information';
import { GetCreditRequestInformation$Params } from '../fn/credit-query/get-credit-request-information';
import { getPaymentInformation } from '../fn/credit-query/get-payment-information';
import { GetPaymentInformation$Params } from '../fn/credit-query/get-payment-information';
import { getPaymentInformation1 } from '../fn/credit-query/get-payment-information-1';
import { GetPaymentInformation1$Params } from '../fn/credit-query/get-payment-information-1';
import { getPaymentUploadInformation } from '../fn/credit-query/get-payment-upload-information';
import { GetPaymentUploadInformation$Params } from '../fn/credit-query/get-payment-upload-information';
import { getSolvencyInformation } from '../fn/credit-query/get-solvency-information';
import { GetSolvencyInformation$Params } from '../fn/credit-query/get-solvency-information';
import { getSolvencyUploadInformation } from '../fn/credit-query/get-solvency-upload-information';
import { GetSolvencyUploadInformation$Params } from '../fn/credit-query/get-solvency-upload-information';
import { PageResponseCreditQueryClientResponse } from '../models/page-response-credit-query-client-response';
import { sendForRevisionRequest } from '../fn/credit-query/send-for-revision-request';
import { SendForRevisionRequest$Params } from '../fn/credit-query/send-for-revision-request';
import { sendRefuseRequest } from '../fn/credit-query/send-refuse-request';
import { SendRefuseRequest$Params } from '../fn/credit-query/send-refuse-request';
import { solvencyVerifyPdf } from '../fn/credit-query/solvency-verify-pdf';
import { SolvencyVerifyPdf$Params } from '../fn/credit-query/solvency-verify-pdf';

@Injectable({ providedIn: 'root' })
export class CreditQueryService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `solvencyVerifyPdf()` */
  static readonly SolvencyVerifyPdfPath = '/credit-query/edit/solvency-verify/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `solvencyVerifyPdf()` instead.
   *
   * This method doesn't expect any request body.
   */
  solvencyVerifyPdf$Response(params: SolvencyVerifyPdf$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return solvencyVerifyPdf(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `solvencyVerifyPdf$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  solvencyVerifyPdf(params: SolvencyVerifyPdf$Params, context?: HttpContext): Observable<number> {
    return this.solvencyVerifyPdf$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `creditQueryVerifyPdf()` */
  static readonly CreditQueryVerifyPdfPath = '/credit-query/edit/query-verify/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `creditQueryVerifyPdf()` instead.
   *
   * This method doesn't expect any request body.
   */
  creditQueryVerifyPdf$Response(params: CreditQueryVerifyPdf$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return creditQueryVerifyPdf(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `creditQueryVerifyPdf$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  creditQueryVerifyPdf(params: CreditQueryVerifyPdf$Params, context?: HttpContext): Observable<number> {
    return this.creditQueryVerifyPdf$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `employmentVerifyPdf()` */
  static readonly EmploymentVerifyPdfPath = '/credit-query/edit/employment-verify/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `employmentVerifyPdf()` instead.
   *
   * This method doesn't expect any request body.
   */
  employmentVerifyPdf$Response(params: EmploymentVerifyPdf$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return employmentVerifyPdf(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `employmentVerifyPdf$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  employmentVerifyPdf(params: EmploymentVerifyPdf$Params, context?: HttpContext): Observable<number> {
    return this.employmentVerifyPdf$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `changeSolvencyIpTaxAgent()` */
  static readonly ChangeSolvencyIpTaxAgentPath = '/credit-query/change/solvency/ip/tax-agent-info/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeSolvencyIpTaxAgent()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeSolvencyIpTaxAgent$Response(params: ChangeSolvencyIpTaxAgent$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return changeSolvencyIpTaxAgent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeSolvencyIpTaxAgent$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeSolvencyIpTaxAgent(params: ChangeSolvencyIpTaxAgent$Params, context?: HttpContext): Observable<number> {
    return this.changeSolvencyIpTaxAgent$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `changeSolvencyIpFinancialSituation()` */
  static readonly ChangeSolvencyIpFinancialSituationPath = '/credit-query/change/solvency/ip/financial-situation/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeSolvencyIpFinancialSituation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeSolvencyIpFinancialSituation$Response(params: ChangeSolvencyIpFinancialSituation$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return changeSolvencyIpFinancialSituation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeSolvencyIpFinancialSituation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeSolvencyIpFinancialSituation(params: ChangeSolvencyIpFinancialSituation$Params, context?: HttpContext): Observable<number> {
    return this.changeSolvencyIpFinancialSituation$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `changeSolvencyHiredWorkerTaxAgent()` */
  static readonly ChangeSolvencyHiredWorkerTaxAgentPath = '/credit-query/change/solvency/hired-worker/tax-agent-info/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeSolvencyHiredWorkerTaxAgent()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeSolvencyHiredWorkerTaxAgent$Response(params: ChangeSolvencyHiredWorkerTaxAgent$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return changeSolvencyHiredWorkerTaxAgent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeSolvencyHiredWorkerTaxAgent$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeSolvencyHiredWorkerTaxAgent(params: ChangeSolvencyHiredWorkerTaxAgent$Params, context?: HttpContext): Observable<number> {
    return this.changeSolvencyHiredWorkerTaxAgent$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `changeSolvencyHiredWorkerFinancialSituation()` */
  static readonly ChangeSolvencyHiredWorkerFinancialSituationPath = '/credit-query/change/solvency/hired-worker/financial-situation/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeSolvencyHiredWorkerFinancialSituation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeSolvencyHiredWorkerFinancialSituation$Response(params: ChangeSolvencyHiredWorkerFinancialSituation$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return changeSolvencyHiredWorkerFinancialSituation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeSolvencyHiredWorkerFinancialSituation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeSolvencyHiredWorkerFinancialSituation(params: ChangeSolvencyHiredWorkerFinancialSituation$Params, context?: HttpContext): Observable<number> {
    return this.changeSolvencyHiredWorkerFinancialSituation$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `sendRefuseRequest()` */
  static readonly SendRefuseRequestPath = '/credit-query/send/refuse/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendRefuseRequest()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendRefuseRequest$Response(params: SendRefuseRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return sendRefuseRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendRefuseRequest$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendRefuseRequest(params: SendRefuseRequest$Params, context?: HttpContext): Observable<number> {
    return this.sendRefuseRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `sendForRevisionRequest()` */
  static readonly SendForRevisionRequestPath = '/credit-query/send/for-revision/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendForRevisionRequest()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendForRevisionRequest$Response(params: SendForRevisionRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return sendForRevisionRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendForRevisionRequest$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendForRevisionRequest(params: SendForRevisionRequest$Params, context?: HttpContext): Observable<number> {
    return this.sendForRevisionRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `createCreditQueryPdf()` */
  static readonly CreateCreditQueryPdfPath = '/credit-query/generate-query/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createCreditQueryPdf()` instead.
   *
   * This method doesn't expect any request body.
   */
  createCreditQueryPdf$Response(params: CreateCreditQueryPdf$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return createCreditQueryPdf(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createCreditQueryPdf$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createCreditQueryPdf(params: CreateCreditQueryPdf$Params, context?: HttpContext): Observable<number> {
    return this.createCreditQueryPdf$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `confirmationOfSolvencyPdf()` */
  static readonly ConfirmationOfSolvencyPdfPath = '/credit-query/confirmation-solvency/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `confirmationOfSolvencyPdf()` instead.
   *
   * This method doesn't expect any request body.
   */
  confirmationOfSolvencyPdf$Response(params: ConfirmationOfSolvencyPdf$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return confirmationOfSolvencyPdf(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `confirmationOfSolvencyPdf$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  confirmationOfSolvencyPdf(params: ConfirmationOfSolvencyPdf$Params, context?: HttpContext): Observable<number> {
    return this.confirmationOfSolvencyPdf$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `confirmationOfEmploymentPdf()` */
  static readonly ConfirmationOfEmploymentPdfPath = '/credit-query/confirmation-employment/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `confirmationOfEmploymentPdf()` instead.
   *
   * This method doesn't expect any request body.
   */
  confirmationOfEmploymentPdf$Response(params: ConfirmationOfEmploymentPdf$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return confirmationOfEmploymentPdf(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `confirmationOfEmploymentPdf$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  confirmationOfEmploymentPdf(params: ConfirmationOfEmploymentPdf$Params, context?: HttpContext): Observable<number> {
    return this.confirmationOfEmploymentPdf$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getSolvencyInformation()` */
  static readonly GetSolvencyInformationPath = '/credit-query/get/solvency/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSolvencyInformation()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSolvencyInformation$Response(params: GetSolvencyInformation$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return getSolvencyInformation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSolvencyInformation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSolvencyInformation(params: GetSolvencyInformation$Params, context?: HttpContext): Observable<Blob> {
    return this.getSolvencyInformation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `getSolvencyUploadInformation()` */
  static readonly GetSolvencyUploadInformationPath = '/credit-query/get/solvency/upload/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSolvencyUploadInformation()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSolvencyUploadInformation$Response(params: GetSolvencyUploadInformation$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return getSolvencyUploadInformation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSolvencyUploadInformation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSolvencyUploadInformation(params: GetSolvencyUploadInformation$Params, context?: HttpContext): Observable<Blob> {
    return this.getSolvencyUploadInformation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `getPaymentInformation()` */
  static readonly GetPaymentInformationPath = '/credit-query/get/payment/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPaymentInformation()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaymentInformation$Response(params: GetPaymentInformation$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return getPaymentInformation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPaymentInformation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaymentInformation(params: GetPaymentInformation$Params, context?: HttpContext): Observable<Blob> {
    return this.getPaymentInformation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `getPaymentUploadInformation()` */
  static readonly GetPaymentUploadInformationPath = '/credit-query/get/payment/upload/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPaymentUploadInformation()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaymentUploadInformation$Response(params: GetPaymentUploadInformation$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return getPaymentUploadInformation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPaymentUploadInformation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaymentUploadInformation(params: GetPaymentUploadInformation$Params, context?: HttpContext): Observable<Blob> {
    return this.getPaymentUploadInformation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `getCreditRequestInformation()` */
  static readonly GetCreditRequestInformationPath = '/credit-query/get/credit-request/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCreditRequestInformation()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCreditRequestInformation$Response(params: GetCreditRequestInformation$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return getCreditRequestInformation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCreditRequestInformation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCreditRequestInformation(params: GetCreditRequestInformation$Params, context?: HttpContext): Observable<Blob> {
    return this.getCreditRequestInformation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `getPaymentInformation1()` */
  static readonly GetPaymentInformation1Path = '/credit-query/all-client';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPaymentInformation1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaymentInformation1$Response(params?: GetPaymentInformation1$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCreditQueryClientResponse>> {
    return getPaymentInformation1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPaymentInformation1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaymentInformation1(params?: GetPaymentInformation1$Params, context?: HttpContext): Observable<PageResponseCreditQueryClientResponse> {
    return this.getPaymentInformation1$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCreditQueryClientResponse>): PageResponseCreditQueryClientResponse => r.body)
    );
  }

  /** Path part for operation `getAllClientPaymentInformationByLastname()` */
  static readonly GetAllClientPaymentInformationByLastnamePath = '/credit-query/all-client/by/lastname';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllClientPaymentInformationByLastname()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllClientPaymentInformationByLastname$Response(params: GetAllClientPaymentInformationByLastname$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCreditQueryClientResponse>> {
    return getAllClientPaymentInformationByLastname(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllClientPaymentInformationByLastname$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllClientPaymentInformationByLastname(params: GetAllClientPaymentInformationByLastname$Params, context?: HttpContext): Observable<PageResponseCreditQueryClientResponse> {
    return this.getAllClientPaymentInformationByLastname$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCreditQueryClientResponse>): PageResponseCreditQueryClientResponse => r.body)
    );
  }

}
