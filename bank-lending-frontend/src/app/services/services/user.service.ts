/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { checkUserData } from '../fn/user/check-user-data';
import { CheckUserData$Params } from '../fn/user/check-user-data';
import { getAllClient } from '../fn/user/get-all-client';
import { GetAllClient$Params } from '../fn/user/get-all-client';
import { getAllClientBySort } from '../fn/user/get-all-client-by-sort';
import { GetAllClientBySort$Params } from '../fn/user/get-all-client-by-sort';
import { getSelectedUser } from '../fn/user/get-selected-user';
import { GetSelectedUser$Params } from '../fn/user/get-selected-user';
import { getUserBySerialNumber } from '../fn/user/get-user-by-serial-number';
import { GetUserBySerialNumber$Params } from '../fn/user/get-user-by-serial-number';
import { PageResponseUserResponse } from '../models/page-response-user-response';
import { UserResponse } from '../models/user-response';

@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `checkUserData()` */
  static readonly CheckUserDataPath = '/user/check';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `checkUserData()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  checkUserData$Response(params: CheckUserData$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return checkUserData(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `checkUserData$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  checkUserData(params: CheckUserData$Params, context?: HttpContext): Observable<number> {
    return this.checkUserData$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getSelectedUser()` */
  static readonly GetSelectedUserPath = '/user/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSelectedUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSelectedUser$Response(params: GetSelectedUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return getSelectedUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSelectedUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSelectedUser(params: GetSelectedUser$Params, context?: HttpContext): Observable<UserResponse> {
    return this.getSelectedUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `getUserBySerialNumber()` */
  static readonly GetUserBySerialNumberPath = '/user/get/by/serial-number';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserBySerialNumber()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserBySerialNumber$Response(params: GetUserBySerialNumber$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return getUserBySerialNumber(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserBySerialNumber$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserBySerialNumber(params: GetUserBySerialNumber$Params, context?: HttpContext): Observable<UserResponse> {
    return this.getUserBySerialNumber$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `getAllClient()` */
  static readonly GetAllClientPath = '/user/all-client';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllClient()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllClient$Response(params?: GetAllClient$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseUserResponse>> {
    return getAllClient(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllClient$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllClient(params?: GetAllClient$Params, context?: HttpContext): Observable<PageResponseUserResponse> {
    return this.getAllClient$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseUserResponse>): PageResponseUserResponse => r.body)
    );
  }

  /** Path part for operation `getAllClientBySort()` */
  static readonly GetAllClientBySortPath = '/user/all-client/by/sort';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllClientBySort()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllClientBySort$Response(params: GetAllClientBySort$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseUserResponse>> {
    return getAllClientBySort(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllClientBySort$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllClientBySort(params: GetAllClientBySort$Params, context?: HttpContext): Observable<PageResponseUserResponse> {
    return this.getAllClientBySort$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseUserResponse>): PageResponseUserResponse => r.body)
    );
  }

}
